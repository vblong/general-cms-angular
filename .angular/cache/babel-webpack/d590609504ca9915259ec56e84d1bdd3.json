{"ast":null,"code":"// Application Classes\nimport { UrlBuilder } from '../shared/classes/url-builder';\nimport { StringHelper } from '../helpers/string-helper';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/config/constants\";\nexport let ApiEndpointsService = /*#__PURE__*/(() => {\n  class ApiEndpointsService {\n    constructor(constants) {\n      this.constants = constants;\n      this.strHelper = new StringHelper();\n    }\n    /* #region URL CREATOR */\n    // URL\n\n\n    createUrl(action, isMockAPI = false) {\n      const urlBuilder = new UrlBuilder(isMockAPI ? this.constants.API_MOCK_ENDPOINT : this.constants.API_ENDPOINT, action);\n      return urlBuilder.toString();\n    } // URL WITH QUERY PARAMS\n\n\n    createUrlWithQueryParameters(action, queryStringHandler) {\n      const urlBuilder = new UrlBuilder(this.constants.API_ENDPOINT, action); // Push extra query string params\n\n      if (queryStringHandler) {\n        queryStringHandler(urlBuilder.queryString);\n      }\n\n      return urlBuilder.toString();\n    } // URL WITH PATH VARIABLES\n\n\n    createUrlWithPathVariables(action, pathVariables = []) {\n      let encodedPathVariablesUrl = ''; // Push extra path variables\n\n      for (const pathVariable of pathVariables) {\n        if (pathVariable !== null) {\n          encodedPathVariablesUrl += `/${encodeURIComponent(pathVariable.toString())}`;\n        }\n      }\n\n      const urlBuilder = new UrlBuilder(this.constants.API_ENDPOINT, `${action}${encodedPathVariablesUrl}`);\n      return urlBuilder.toString();\n    }\n    /* #endregion */\n\n    /**\r\n     *    START YOUR OWN ENDPOINTS HERE\r\n     */\n\n    /**\r\n     * ENTRY ENDPOINTS\r\n     **/\n\n\n    getAllEntryBrief() {\n      return this.createUrl('entries-brief');\n    }\n\n    getEntriesEndpoint(page_index, page_size) {\n      return this.createUrlWithQueryParameters('entries', qs => {\n        qs.push('page_index', page_index);\n        qs.push('page_size', page_size);\n      });\n    }\n\n    getEntryEndpoint(post_id) {\n      return this.createUrlWithQueryParameters('entry', qs => {\n        qs.push('post_id', post_id);\n      });\n    }\n\n    getTotalEntriesEndpoint() {\n      return this.createUrlWithQueryParameters('total_entries');\n    }\n\n    postNewEntry() {\n      return this.createUrl('post-insert');\n    }\n\n    deleteEntry(entry_id) {\n      return this.createUrlWithPathVariables('delete-entry', [entry_id]);\n    }\n    /**\r\n     *  CATEGORY ENDPOINTS\r\n     */\n\n\n    getAllTermsEndpoint() {\n      return this.createUrlWithQueryParameters('terms');\n    }\n\n    postNewCategory() {\n      return this.createUrl('post-term');\n    }\n\n    updateCategory() {\n      return this.createUrl('update-term');\n    }\n\n    deleteCategory(term_id) {\n      return this.createUrlWithPathVariables('delete-term', [term_id]);\n    }\n\n  }\n\n  ApiEndpointsService.ɵfac = function ApiEndpointsService_Factory(t) {\n    return new (t || ApiEndpointsService)(i0.ɵɵinject(i1.Constants));\n  };\n\n  ApiEndpointsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiEndpointsService,\n    factory: ApiEndpointsService.ɵfac,\n    providedIn: 'root'\n  });\n  return ApiEndpointsService;\n})();","map":null,"metadata":{},"sourceType":"module"}