{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/material/checkbox\";\n\nfunction FlexCheckboxComponent_li_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"li\", 5);\n    i0.ɵɵelementStart(1, \"mat-checkbox\", 6);\n    i0.ɵɵlistener(\"change\", function FlexCheckboxComponent_li_6_Template_mat_checkbox_change_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const item_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.statesChanges(item_r1[ctx_r2.displayAttr], $event.checked);\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", item_r1[ctx_r0.displayAttr], \" \");\n  }\n}\n\nexport let FlexCheckboxComponent = /*#__PURE__*/(() => {\n  class FlexCheckboxComponent {\n    constructor() {\n      this.name = \"New Box\";\n      this.displayAttr = \"\";\n      this.items = [];\n      this.states = new EventEmitter();\n      this.task = {\n        name: 'Indeterminate',\n        completed: false,\n        color: 'primary',\n        subtasks: [{\n          name: 'Primary',\n          completed: false,\n          color: 'primary'\n        }, {\n          name: 'Accent',\n          completed: false,\n          color: 'accent'\n        }, {\n          name: 'Warn',\n          completed: false,\n          color: 'warn'\n        }]\n      };\n      this.allComplete = false;\n    }\n\n    ngOnInit() {}\n\n    updateAllComplete() {\n      this.allComplete = this.task.subtasks != null && this.task.subtasks.every(t => t.completed);\n    }\n\n    someComplete() {\n      if (this.task.subtasks == null) {\n        return false;\n      }\n\n      return this.task.subtasks.filter(t => t.completed).length > 0 && !this.allComplete;\n    }\n\n    setAll(completed) {\n      this.allComplete = completed;\n\n      if (this.task.subtasks == null) {\n        return;\n      }\n\n      this.task.subtasks.forEach(t => t.completed = completed);\n    }\n\n    statesChanges(item, value) {\n      console.log(item, value);\n      this.states.emit({\n        item,\n        value\n      });\n    }\n\n  }\n\n  FlexCheckboxComponent.ɵfac = function FlexCheckboxComponent_Factory(t) {\n    return new (t || FlexCheckboxComponent)();\n  };\n\n  FlexCheckboxComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: FlexCheckboxComponent,\n    selectors: [[\"app-flex-checkbox\"]],\n    inputs: {\n      name: \"name\",\n      displayAttr: \"displayAttr\",\n      items: \"items\"\n    },\n    outputs: {\n      states: \"states\"\n    },\n    decls: 7,\n    vars: 2,\n    consts: [[1, \"pc-box-shadow\", \"pc-margin-vl\", \"pc-margin-hm\"], [1, \"pc-padding-vl\", \"pc-padding-hl\"], [1, \"pc-align-left\", \"pc-bg-primary\", \"pc-font-white\"], [1, \"pc-padding-h0\"], [\"class\", \"pc-align-left pc-wraptext\", 4, \"ngFor\", \"ngForOf\"], [1, \"pc-align-left\", \"pc-wraptext\"], [3, \"change\"]],\n    template: function FlexCheckboxComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"h2\", 2);\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\");\n        i0.ɵɵelementStart(5, \"ul\", 3);\n        i0.ɵɵtemplate(6, FlexCheckboxComponent_li_6_Template, 3, 1, \"li\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(ctx.name);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.items);\n      }\n    },\n    directives: [i1.NgForOf, i2.MatCheckbox],\n    styles: [\"\"]\n  });\n  return FlexCheckboxComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}