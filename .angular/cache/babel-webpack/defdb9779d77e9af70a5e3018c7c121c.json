{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { AsyncSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { StringHelper } from 'src/app/helpers/string-helper';\nimport { FlexCheckboxComponent } from 'src/app/shared/flex-checkbox/flex-checkbox.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/api-http-service\";\nimport * as i2 from \"src/app/service/api-endpoints.service\";\nimport * as i3 from \"src/app/config/constants\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@angular/material/form-field\";\nimport * as i6 from \"@angular/material/input\";\nimport * as i7 from \"@angular/common\";\nimport * as i8 from \"@tinymce/tinymce-angular\";\nimport * as i9 from \"@angular/material/button\";\nimport * as i10 from \"@angular/material/tooltip\";\nimport * as i11 from \"../../../shared/flex-checkbox/flex-checkbox.component\";\n\nfunction NewEntryComponent_mat_error_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Title must not be empty! \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction NewEntryComponent_mat_error_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Content must not be empty! \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction NewEntryComponent_mat_error_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" Your post exceeds the character limit \", ctx_r2.myForm.controls.body.getError(\"maxlength\").actualLength, \" / \", ctx_r2.myForm.controls.body.getError(\"maxlength\").requiredLength, \" \");\n  }\n}\n\nconst _c0 = \"advlist autolink lists link image charmap print preview anchor\";\nconst _c1 = \"insertdatetime media table paste code help wordcount\";\n\nconst _c2 = function () {\n  return [_c0, \"searchreplace visualblocks code fullscreen\", _c1];\n};\n\nconst _c3 = \"undo redo | formatselect | bold italic backcolor | \\n                  alignleft aligncenter alignright alignjustify | \\n                  bullist numlist outdent indent | removeformat | help\";\n\nconst _c4 = function (a2) {\n  return {\n    height: 500,\n    menubar: false,\n    plugins: a2,\n    toolbar: _c3\n  };\n};\n\nconst maxLength = (editorSubject, characterLimit) => {\n  return control => {\n    return editorSubject.pipe(map(editor => {\n      const characterCount = editor.plugins.wordcount.body.getCharacterCount();\n      return characterCount <= characterLimit ? null : {\n        maxlength: {\n          requiredLength: characterLimit,\n          actualLength: characterCount\n        }\n      };\n    }));\n  };\n};\n\nexport let NewEntryComponent = /*#__PURE__*/(() => {\n  class NewEntryComponent {\n    constructor(_apiHttpService, _apiEndpointsService, constants) {\n      this._apiHttpService = _apiHttpService;\n      this._apiEndpointsService = _apiEndpointsService;\n      this.constants = constants;\n      this.editorSubject = new AsyncSubject();\n      this.myForm = new FormGroup({\n        title: new FormControl(\"\", Validators.required),\n        body: new FormControl(\"\", Validators.required)\n      });\n      this.strHelper = new StringHelper();\n    }\n\n    ngOnChanges(changes) {\n      this.checkbox.states.subscribe(signal => {\n        console.log(\"Changes in signal\", signal);\n      });\n    }\n\n    ngAfterViewInit() {}\n\n    ngOnInit() {\n      this.getAllCategories();\n    }\n\n    handleEditorInit(e) {\n      this.editorSubject.next(e.editor);\n      this.editorSubject.complete();\n    }\n\n    onSubmit() {\n      if (this.myForm.valid) {\n        console.log(\"New entry submitted\");\n        let newEntry = {\n          post_author: 0,\n          post_content: this.myForm.value.body,\n          post_title: this.myForm.value.title,\n          comment_count: 0,\n          comment_status: \"open\",\n          guid: this.constants.FRONTEND_ENDPOINT + this.strHelper.unicode2ansi(this.myForm.value.title).replace(' ', '-'),\n          menu_order: 0,\n          ping_status: \"open\",\n          pinged: \"\",\n          post_content_filtered: \"\",\n          post_date: new Date(),\n          post_date_gmt: new Date(),\n          post_excerpt: \"\",\n          post_mime_type: \"\",\n          post_modified: new Date(),\n          post_modified_gmt: new Date(),\n          post_name: this.strHelper.unicode2ansi(this.myForm.value.title).replace(' ', '-'),\n          post_parent: 0,\n          post_password: \"\",\n          post_status: \"publish\",\n          post_type: \"post\",\n          to_ping: \"\"\n        };\n\n        this._apiHttpService.post(this._apiEndpointsService.postNewEntry(), newEntry).subscribe(data => {\n          console.log(data);\n        });\n      }\n    }\n\n    getAllCategories() {\n      return this._apiHttpService.get(this._apiEndpointsService.getAllTermsEndpoint()).subscribe(data => {\n        this.categories = data;\n      });\n    }\n\n  }\n\n  NewEntryComponent.ɵfac = function NewEntryComponent_Factory(t) {\n    return new (t || NewEntryComponent)(i0.ɵɵdirectiveInject(i1.ApiHttpService), i0.ɵɵdirectiveInject(i2.ApiEndpointsService), i0.ɵɵdirectiveInject(i3.Constants));\n  };\n\n  NewEntryComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: NewEntryComponent,\n    selectors: [[\"app-new-entry\"]],\n    viewQuery: function NewEntryComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(FlexCheckboxComponent, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.checkbox = _t.first);\n      }\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 15,\n    vars: 13,\n    consts: [[1, \"new-entry-wrapper\"], [1, \"new-entry-ctn\"], [\"id\", \"entry-content\", 1, \"new-entry-element\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"new-entry-title\"], [\"matInput\", \"\", \"placeholder\", \"Title\", \"type\", \"text\", 3, \"formControl\"], [4, \"ngIf\"], [1, \"new-entry-body-ctn\"], [\"apiKey\", \"ta3ftv27unm3jngefqh22xh7nae4y5ffyyd4cc7kdk26ucnx\", 1, \"mat-elevation-z1\", 3, \"formControl\", \"init\", \"onInit\"], [\"mat-raised-button\", \"\", \"matTooltip\", \"Post to longregex\", 1, \"new-entry-submit\"], [\"id\", \"entry-meta\", 1, \"new-entry-element\", \"pc-margin-vl\"], [3, \"name\", \"items\", \"displayAttr\"]],\n    template: function NewEntryComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"form\", 3);\n        i0.ɵɵlistener(\"ngSubmit\", function NewEntryComponent_Template_form_ngSubmit_3_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(4, \"mat-form-field\", 4);\n        i0.ɵɵelement(5, \"input\", 5);\n        i0.ɵɵtemplate(6, NewEntryComponent_mat_error_6_Template, 2, 0, \"mat-error\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\", 7);\n        i0.ɵɵelementStart(8, \"editor\", 8);\n        i0.ɵɵlistener(\"onInit\", function NewEntryComponent_Template_editor_onInit_8_listener($event) {\n          return ctx.handleEditorInit($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(9, NewEntryComponent_mat_error_9_Template, 2, 0, \"mat-error\", 6);\n        i0.ɵɵtemplate(10, NewEntryComponent_mat_error_10_Template, 2, 2, \"mat-error\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"button\", 9);\n        i0.ɵɵtext(12, \"Submit\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"div\", 10);\n        i0.ɵɵelement(14, \"app-flex-checkbox\", 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.myForm);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formControl\", ctx.myForm.controls.title);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.myForm.controls.title.hasError(\"required\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formControl\", ctx.myForm.controls.body)(\"init\", i0.ɵɵpureFunction1(11, _c4, i0.ɵɵpureFunction0(10, _c2)));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.myForm.controls.body.touched && ctx.myForm.controls.body.hasError(\"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.myForm.controls.body.hasError(\"maxlength\"));\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"name\", \"Category\")(\"items\", ctx.categories)(\"displayAttr\", \"name\");\n      }\n    },\n    directives: [i4.ɵNgNoValidate, i4.NgControlStatusGroup, i4.FormGroupDirective, i5.MatFormField, i6.MatInput, i4.DefaultValueAccessor, i4.NgControlStatus, i4.FormControlDirective, i7.NgIf, i8.EditorComponent, i9.MatButton, i10.MatTooltip, i11.FlexCheckboxComponent, i5.MatError],\n    styles: [\".new-entry-wrapper[_ngcontent-%COMP%]{max-width:1280px;height:100%;margin:0 auto}.new-entry-wrapper[_ngcontent-%COMP%]   .new-entry-ctn[_ngcontent-%COMP%]{margin:0 0 20px}.new-entry-wrapper[_ngcontent-%COMP%]   .new-entry-ctn[_ngcontent-%COMP%]   .new-entry-element[_ngcontent-%COMP%]{display:inline-block}.new-entry-wrapper[_ngcontent-%COMP%]   .new-entry-ctn[_ngcontent-%COMP%]   .new-entry-element[_ngcontent-%COMP%]   .new-entry-title[_ngcontent-%COMP%]{font-size:20px;width:100%}.new-entry-wrapper[_ngcontent-%COMP%]   .new-entry-ctn[_ngcontent-%COMP%]   .new-entry-element#entry-content[_ngcontent-%COMP%]{width:80%}.new-entry-wrapper[_ngcontent-%COMP%]   .new-entry-ctn[_ngcontent-%COMP%]   .new-entry-element#entry-meta[_ngcontent-%COMP%]{width:20%;vertical-align:top}.new-entry-wrapper[_ngcontent-%COMP%]   .new-entry-ctn[_ngcontent-%COMP%]   .new-entry-submit[_ngcontent-%COMP%]{margin:10px 0;float:left}\"]\n  });\n  return NewEntryComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}