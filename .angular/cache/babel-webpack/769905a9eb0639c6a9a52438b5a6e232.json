{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { AsyncSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { MENU_ITEMS } from '../../@themes/widgets/side-menu/side-menu.menu';\nimport { StringHelper } from '../../helpers/string-helper';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/api-http-service\";\nimport * as i2 from \"src/app/service/api-endpoints.service\";\nimport * as i3 from \"../../config/constants\";\nimport * as i4 from \"../../@themes/widgets/side-menu/side-menu.component\";\nimport * as i5 from \"@angular/router\";\nimport * as i6 from \"../footer/footer.component\";\n\nconst maxLength = (editorSubject, characterLimit) => {\n  return control => {\n    return editorSubject.pipe(map(editor => {\n      const characterCount = editor.plugins.wordcount.body.getCharacterCount();\n      return characterCount <= characterLimit ? null : {\n        maxlength: {\n          requiredLength: characterLimit,\n          actualLength: characterCount\n        }\n      };\n    }));\n  };\n};\n\nexport let AdminDashboardComponent = /*#__PURE__*/(() => {\n  class AdminDashboardComponent {\n    constructor(_apiHttpService, _apiEndpointsService, constants) {\n      this._apiHttpService = _apiHttpService;\n      this._apiEndpointsService = _apiEndpointsService;\n      this.constants = constants;\n      this.editorSubject = new AsyncSubject();\n      this.menu = MENU_ITEMS;\n      this.myForm = new FormGroup({\n        title: new FormControl(\"\", Validators.required),\n        body: new FormControl(\"\", Validators.required)\n      });\n      this.strHelper = new StringHelper();\n    }\n\n    ngOnInit() {}\n\n    handleEditorInit(e) {\n      this.editorSubject.next(e.editor);\n      this.editorSubject.complete();\n    } //  DEPRECATED\n\n\n    onSubmit() {\n      console.log(\"New entry submitted\");\n      let newEntry = {\n        post_author: 0,\n        post_content: this.myForm.value.body,\n        post_title: this.myForm.value.title,\n        comment_count: 0,\n        comment_status: \"open\",\n        guid: this.constants.FRONTEND_ENDPOINT + this.strHelper.unicode2ansi(this.myForm.value.title).replace(' ', '-'),\n        menu_order: 0,\n        ping_status: \"open\",\n        pinged: \"\",\n        post_content_filtered: \"\",\n        post_date: new Date(),\n        post_date_gmt: new Date(),\n        post_excerpt: \"\",\n        post_mime_type: \"\",\n        post_modified: new Date(),\n        post_modified_gmt: new Date(),\n        post_name: this.strHelper.unicode2ansi(this.myForm.value.title).replace(' ', '-'),\n        post_parent: 0,\n        post_password: \"\",\n        post_status: \"publish\",\n        post_type: \"post\",\n        to_ping: \"\"\n      };\n\n      this._apiHttpService.post(this._apiEndpointsService.postNewEntry(), newEntry).subscribe(data => {\n        console.log(data);\n      });\n    }\n\n  }\n\n  AdminDashboardComponent.ɵfac = function AdminDashboardComponent_Factory(t) {\n    return new (t || AdminDashboardComponent)(i0.ɵɵdirectiveInject(i1.ApiHttpService), i0.ɵɵdirectiveInject(i2.ApiEndpointsService), i0.ɵɵdirectiveInject(i3.Constants));\n  };\n\n  AdminDashboardComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AdminDashboardComponent,\n    selectors: [[\"app-dashboard\"]],\n    decls: 7,\n    vars: 0,\n    consts: [[1, \"dashboard-wrapper\"], [1, \"dashboard-ctn\"], [\"id\", \"left-bar\", 1, \"dashboard-child-ctn\"], [\"id\", \"content\", 1, \"dashboard-child-ctn\"]],\n    template: function AdminDashboardComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelement(3, \"app-side-menu\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\", 3);\n        i0.ɵɵelement(5, \"router-outlet\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(6, \"app-footer\");\n      }\n    },\n    directives: [i4.SideMenuComponent, i5.RouterOutlet, i6.FooterComponent],\n    styles: [\".dashboard-wrapper[_ngcontent-%COMP%]{height:100%}.dashboard-wrapper[_ngcontent-%COMP%]   .dashboard-ctn[_ngcontent-%COMP%]{height:100%;text-align:center}.dashboard-wrapper[_ngcontent-%COMP%]   .dashboard-ctn[_ngcontent-%COMP%]   .dashboard-child-ctn[_ngcontent-%COMP%]{height:100%;display:inline-block;vertical-align:top}.dashboard-wrapper[_ngcontent-%COMP%]   .dashboard-ctn[_ngcontent-%COMP%]   .dashboard-child-ctn#left-bar[_ngcontent-%COMP%]{max-width:250px;width:25%;float:left}.dashboard-wrapper[_ngcontent-%COMP%]   .dashboard-ctn[_ngcontent-%COMP%]   .dashboard-child-ctn#content[_ngcontent-%COMP%]{width:75%}[_nghost-%COMP%]{height:100%}\"]\n  });\n  return AdminDashboardComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}