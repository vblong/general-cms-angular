{"ast":null,"code":"import { EventEmitter, Output, InjectionToken, forwardRef, Component, ElementRef, NgZone, Inject, PLATFORM_ID, Optional, Input, NgModule } from '@angular/core';\nimport { isPlatformBrowser, CommonModule } from '@angular/common';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\n/**\n * Copyright (c) 2017-present, Ephox, Inc.\n *\n * This source code is licensed under the Apache 2 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nfunction EditorComponent_ng_template_0_Template(rf, ctx) {}\n\nconst getTinymce = () => {\n  const w = typeof window !== 'undefined' ? window : undefined;\n  return w && w.tinymce ? w.tinymce : null;\n};\n\nconst ɵ0$2 = getTinymce;\nlet Events = /*#__PURE__*/(() => {\n  class Events {\n    constructor() {\n      this.onBeforePaste = new EventEmitter();\n      this.onBlur = new EventEmitter();\n      this.onClick = new EventEmitter();\n      this.onContextMenu = new EventEmitter();\n      this.onCopy = new EventEmitter();\n      this.onCut = new EventEmitter();\n      this.onDblclick = new EventEmitter();\n      this.onDrag = new EventEmitter();\n      this.onDragDrop = new EventEmitter();\n      this.onDragEnd = new EventEmitter();\n      this.onDragGesture = new EventEmitter();\n      this.onDragOver = new EventEmitter();\n      this.onDrop = new EventEmitter();\n      this.onFocus = new EventEmitter();\n      this.onFocusIn = new EventEmitter();\n      this.onFocusOut = new EventEmitter();\n      this.onKeyDown = new EventEmitter();\n      this.onKeyPress = new EventEmitter();\n      this.onKeyUp = new EventEmitter();\n      this.onMouseDown = new EventEmitter();\n      this.onMouseEnter = new EventEmitter();\n      this.onMouseLeave = new EventEmitter();\n      this.onMouseMove = new EventEmitter();\n      this.onMouseOut = new EventEmitter();\n      this.onMouseOver = new EventEmitter();\n      this.onMouseUp = new EventEmitter();\n      this.onPaste = new EventEmitter();\n      this.onSelectionChange = new EventEmitter();\n      this.onActivate = new EventEmitter();\n      this.onAddUndo = new EventEmitter();\n      this.onBeforeAddUndo = new EventEmitter();\n      this.onBeforeExecCommand = new EventEmitter();\n      this.onBeforeGetContent = new EventEmitter();\n      this.onBeforeRenderUI = new EventEmitter();\n      this.onBeforeSetContent = new EventEmitter();\n      this.onChange = new EventEmitter();\n      this.onClearUndos = new EventEmitter();\n      this.onDeactivate = new EventEmitter();\n      this.onDirty = new EventEmitter();\n      this.onExecCommand = new EventEmitter();\n      this.onGetContent = new EventEmitter();\n      this.onHide = new EventEmitter();\n      this.onInit = new EventEmitter();\n      this.onInitNgModel = new EventEmitter();\n      this.onLoadContent = new EventEmitter();\n      this.onNodeChange = new EventEmitter();\n      this.onPostProcess = new EventEmitter();\n      this.onPostRender = new EventEmitter();\n      this.onPreInit = new EventEmitter();\n      this.onPreProcess = new EventEmitter();\n      this.onProgressState = new EventEmitter();\n      this.onRedo = new EventEmitter();\n      this.onRemove = new EventEmitter();\n      this.onReset = new EventEmitter();\n      this.onResizeEditor = new EventEmitter();\n      this.onSaveContent = new EventEmitter();\n      this.onSetAttrib = new EventEmitter();\n      this.onObjectResizeStart = new EventEmitter();\n      this.onObjectResized = new EventEmitter();\n      this.onObjectSelected = new EventEmitter();\n      this.onSetContent = new EventEmitter();\n      this.onShow = new EventEmitter();\n      this.onSubmit = new EventEmitter();\n      this.onUndo = new EventEmitter();\n      this.onVisualAid = new EventEmitter();\n    }\n\n  }\n\n  Events.ɵfac = function Events_Factory(t) {\n    return new (t || Events)();\n  };\n\n  Events.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: Events,\n    outputs: {\n      onBeforePaste: \"onBeforePaste\",\n      onBlur: \"onBlur\",\n      onClick: \"onClick\",\n      onContextMenu: \"onContextMenu\",\n      onCopy: \"onCopy\",\n      onCut: \"onCut\",\n      onDblclick: \"onDblclick\",\n      onDrag: \"onDrag\",\n      onDragDrop: \"onDragDrop\",\n      onDragEnd: \"onDragEnd\",\n      onDragGesture: \"onDragGesture\",\n      onDragOver: \"onDragOver\",\n      onDrop: \"onDrop\",\n      onFocus: \"onFocus\",\n      onFocusIn: \"onFocusIn\",\n      onFocusOut: \"onFocusOut\",\n      onKeyDown: \"onKeyDown\",\n      onKeyPress: \"onKeyPress\",\n      onKeyUp: \"onKeyUp\",\n      onMouseDown: \"onMouseDown\",\n      onMouseEnter: \"onMouseEnter\",\n      onMouseLeave: \"onMouseLeave\",\n      onMouseMove: \"onMouseMove\",\n      onMouseOut: \"onMouseOut\",\n      onMouseOver: \"onMouseOver\",\n      onMouseUp: \"onMouseUp\",\n      onPaste: \"onPaste\",\n      onSelectionChange: \"onSelectionChange\",\n      onActivate: \"onActivate\",\n      onAddUndo: \"onAddUndo\",\n      onBeforeAddUndo: \"onBeforeAddUndo\",\n      onBeforeExecCommand: \"onBeforeExecCommand\",\n      onBeforeGetContent: \"onBeforeGetContent\",\n      onBeforeRenderUI: \"onBeforeRenderUI\",\n      onBeforeSetContent: \"onBeforeSetContent\",\n      onChange: \"onChange\",\n      onClearUndos: \"onClearUndos\",\n      onDeactivate: \"onDeactivate\",\n      onDirty: \"onDirty\",\n      onExecCommand: \"onExecCommand\",\n      onGetContent: \"onGetContent\",\n      onHide: \"onHide\",\n      onInit: \"onInit\",\n      onInitNgModel: \"onInitNgModel\",\n      onLoadContent: \"onLoadContent\",\n      onNodeChange: \"onNodeChange\",\n      onPostProcess: \"onPostProcess\",\n      onPostRender: \"onPostRender\",\n      onPreInit: \"onPreInit\",\n      onPreProcess: \"onPreProcess\",\n      onProgressState: \"onProgressState\",\n      onRedo: \"onRedo\",\n      onRemove: \"onRemove\",\n      onReset: \"onReset\",\n      onResizeEditor: \"onResizeEditor\",\n      onSaveContent: \"onSaveContent\",\n      onSetAttrib: \"onSetAttrib\",\n      onObjectResizeStart: \"onObjectResizeStart\",\n      onObjectResized: \"onObjectResized\",\n      onObjectSelected: \"onObjectSelected\",\n      onSetContent: \"onSetContent\",\n      onShow: \"onShow\",\n      onSubmit: \"onSubmit\",\n      onUndo: \"onUndo\",\n      onVisualAid: \"onVisualAid\"\n    }\n  });\n  return Events;\n})();\nconst validEvents = ['onActivate', 'onAddUndo', 'onBeforeAddUndo', 'onBeforeExecCommand', 'onBeforeGetContent', 'onBeforeRenderUI', 'onBeforeSetContent', 'onBeforePaste', 'onBlur', 'onChange', 'onClearUndos', 'onClick', 'onContextMenu', 'onCopy', 'onCut', 'onDblclick', 'onDeactivate', 'onDirty', 'onDrag', 'onDragDrop', 'onDragEnd', 'onDragGesture', 'onDragOver', 'onDrop', 'onExecCommand', 'onFocus', 'onFocusIn', 'onFocusOut', 'onGetContent', 'onHide', 'onInit', 'onKeyDown', 'onKeyPress', 'onKeyUp', 'onLoadContent', 'onMouseDown', 'onMouseEnter', 'onMouseLeave', 'onMouseMove', 'onMouseOut', 'onMouseOver', 'onMouseUp', 'onNodeChange', 'onObjectResizeStart', 'onObjectResized', 'onObjectSelected', 'onPaste', 'onPostProcess', 'onPostRender', 'onPreProcess', 'onProgressState', 'onRedo', 'onRemove', 'onReset', 'onResizeEditor', 'onSaveContent', 'onSelectionChange', 'onSetAttrib', 'onSetContent', 'onShow', 'onSubmit', 'onUndo', 'onVisualAid'];\n/**\n * Copyright (c) 2017-present, Ephox, Inc.\n *\n * This source code is licensed under the Apache 2 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst bindHandlers = (ctx, editor) => {\n  const allowedEvents = getValidEvents(ctx);\n  allowedEvents.forEach(eventName => {\n    const eventEmitter = ctx[eventName];\n    editor.on(eventName.substring(2), event => ctx.ngZone.run(() => eventEmitter.emit({\n      event,\n      editor\n    })));\n  });\n};\n\nconst ɵ0$1 = bindHandlers;\n\nconst getValidEvents = ctx => {\n  const ignoredEvents = parseStringProperty(ctx.ignoreEvents, []);\n  const allowedEvents = parseStringProperty(ctx.allowedEvents, validEvents).filter(event => validEvents.includes(event) && !ignoredEvents.includes(event));\n  return allowedEvents;\n};\n\nconst ɵ1$1 = getValidEvents;\n\nconst parseStringProperty = (property, defaultValue) => {\n  if (typeof property === 'string') {\n    return property.split(',').map(value => value.trim());\n  }\n\n  if (Array.isArray(property)) {\n    return property;\n  }\n\n  return defaultValue;\n};\n\nconst ɵ2 = parseStringProperty;\nlet unique = 0;\n\nconst uuid = prefix => {\n  const date = new Date();\n  const time = date.getTime();\n  const random = Math.floor(Math.random() * 1000000000);\n  unique++;\n  return prefix + '_' + random + unique + String(time);\n};\n\nconst ɵ3 = uuid;\n\nconst isTextarea = element => typeof element !== 'undefined' && element.tagName.toLowerCase() === 'textarea';\n\nconst ɵ4 = isTextarea;\n\nconst normalizePluginArray = plugins => {\n  if (typeof plugins === 'undefined' || plugins === '') {\n    return [];\n  }\n\n  return Array.isArray(plugins) ? plugins : plugins.split(' ');\n};\n\nconst ɵ5 = normalizePluginArray;\n\nconst mergePlugins = (initPlugins, inputPlugins) => normalizePluginArray(initPlugins).concat(normalizePluginArray(inputPlugins));\n\nconst ɵ6 = mergePlugins; // eslint-disable-next-line @typescript-eslint/no-empty-function\n\nconst noop = () => {};\n\nconst ɵ7 = noop;\n\nconst isNullOrUndefined = value => value === null || value === undefined;\n\nconst ɵ8 = isNullOrUndefined;\n/**\n * Copyright (c) 2017-present, Ephox, Inc.\n *\n * This source code is licensed under the Apache 2 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst createState = () => ({\n  listeners: [],\n  scriptId: uuid('tiny-script'),\n  scriptLoaded: false\n});\n\nconst ɵ0 = createState;\n\nconst CreateScriptLoader = () => {\n  let state = createState();\n\n  const injectScriptTag = (scriptId, doc, url, callback) => {\n    const scriptTag = doc.createElement('script');\n    scriptTag.referrerPolicy = 'origin';\n    scriptTag.type = 'application/javascript';\n    scriptTag.id = scriptId;\n    scriptTag.src = url;\n\n    const handler = () => {\n      scriptTag.removeEventListener('load', handler);\n      callback();\n    };\n\n    scriptTag.addEventListener('load', handler);\n\n    if (doc.head) {\n      doc.head.appendChild(scriptTag);\n    }\n  };\n\n  const load = (doc, url, callback) => {\n    if (state.scriptLoaded) {\n      callback();\n    } else {\n      state.listeners.push(callback);\n\n      if (!doc.getElementById(state.scriptId)) {\n        injectScriptTag(state.scriptId, doc, url, () => {\n          state.listeners.forEach(fn => fn());\n          state.scriptLoaded = true;\n        });\n      }\n    }\n  }; // Only to be used by tests.\n\n\n  const reinitialize = () => {\n    state = createState();\n  };\n\n  return {\n    load,\n    reinitialize\n  };\n};\n\nconst ɵ1 = CreateScriptLoader;\nconst ScriptLoader = CreateScriptLoader();\n/* eslint-disable @typescript-eslint/no-parameter-properties */\n\nconst TINYMCE_SCRIPT_SRC = new InjectionToken('TINYMCE_SCRIPT_SRC');\nconst EDITOR_COMPONENT_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => EditorComponent),\n  multi: true\n};\nlet EditorComponent = /*#__PURE__*/(() => {\n  class EditorComponent extends Events {\n    constructor(elementRef, ngZone, platformId, tinymceScriptSrc) {\n      super();\n      this.platformId = platformId;\n      this.tinymceScriptSrc = tinymceScriptSrc;\n      this.cloudChannel = '5';\n      this.apiKey = 'no-api-key';\n      this.id = '';\n      this.modelEvents = 'change input undo redo';\n      this.onTouchedCallback = noop;\n      this._elementRef = elementRef;\n      this.ngZone = ngZone;\n      this.initialise = this.initialise.bind(this);\n    }\n\n    set disabled(val) {\n      this._disabled = val;\n\n      if (this._editor && this._editor.initialized) {\n        this._editor.setMode(val ? 'readonly' : 'design');\n      }\n    }\n\n    get disabled() {\n      return this._disabled;\n    }\n\n    get editor() {\n      return this._editor;\n    }\n\n    writeValue(value) {\n      if (this._editor && this._editor.initialized) {\n        this._editor.setContent(isNullOrUndefined(value) ? '' : value);\n      } else {\n        this.initialValue = value === null ? undefined : value;\n      }\n    }\n\n    registerOnChange(fn) {\n      this.onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn) {\n      this.onTouchedCallback = fn;\n    }\n\n    setDisabledState(isDisabled) {\n      if (this._editor) {\n        this._editor.setMode(isDisabled ? 'readonly' : 'design');\n      } else if (isDisabled) {\n        this.init = Object.assign(Object.assign({}, this.init), {\n          readonly: true\n        });\n      }\n    }\n\n    ngAfterViewInit() {\n      var _a;\n\n      if (isPlatformBrowser(this.platformId)) {\n        this.id = this.id || uuid('tiny-angular');\n        this.inline = this.inline !== undefined ? this.inline !== false : !!((_a = this.init) === null || _a === void 0 ? void 0 : _a.inline);\n        this.createElement();\n\n        if (getTinymce() !== null) {\n          this.initialise();\n        } else if (this._element && this._element.ownerDocument) {\n          ScriptLoader.load(this._element.ownerDocument, this.getScriptSrc(), this.initialise.bind(this));\n        }\n      }\n    }\n\n    ngOnDestroy() {\n      if (getTinymce() !== null) {\n        getTinymce().remove(this._editor);\n      }\n    }\n\n    createElement() {\n      const tagName = typeof this.tagName === 'string' ? this.tagName : 'div';\n      this._element = document.createElement(this.inline ? tagName : 'textarea');\n\n      if (this._element) {\n        if (document.getElementById(this.id)) {\n          /* eslint no-console: [\"error\", { allow: [\"warn\"] }] */\n          console.warn(`TinyMCE-Angular: an element with id [${this.id}] already exists. Editors with duplicate Id will not be able to mount`);\n        }\n\n        this._element.id = this.id;\n\n        if (isTextarea(this._element)) {\n          this._element.style.visibility = 'hidden';\n        }\n\n        this._elementRef.nativeElement.appendChild(this._element);\n      }\n    }\n\n    initialise() {\n      const finalInit = Object.assign(Object.assign({}, this.init), {\n        target: this._element,\n        inline: this.inline,\n        readonly: this.disabled,\n        plugins: mergePlugins(this.init && this.init.plugins, this.plugins),\n        toolbar: this.toolbar || this.init && this.init.toolbar,\n        setup: editor => {\n          this._editor = editor;\n          editor.on('init', _e => {\n            this.initEditor(editor);\n          });\n          bindHandlers(this, editor);\n\n          if (this.init && typeof this.init.setup === 'function') {\n            this.init.setup(editor);\n          }\n        }\n      });\n\n      if (isTextarea(this._element)) {\n        this._element.style.visibility = '';\n      }\n\n      this.ngZone.runOutsideAngular(() => {\n        getTinymce().init(finalInit);\n      });\n    }\n\n    getScriptSrc() {\n      return isNullOrUndefined(this.tinymceScriptSrc) ? `https://cdn.tiny.cloud/1/${this.apiKey}/tinymce/${this.cloudChannel}/tinymce.min.js` : this.tinymceScriptSrc;\n    }\n\n    initEditor(editor) {\n      editor.on('blur', () => this.ngZone.run(() => this.onTouchedCallback()));\n      editor.on(this.modelEvents, () => this.ngZone.run(() => this.emitOnChange(editor)));\n\n      if (typeof this.initialValue === 'string') {\n        this.ngZone.run(() => {\n          editor.setContent(this.initialValue);\n\n          if (editor.getContent() !== this.initialValue) {\n            this.emitOnChange(editor);\n          }\n\n          if (this.onInitNgModel !== undefined) {\n            this.onInitNgModel.emit(editor);\n          }\n        });\n      }\n    }\n\n    emitOnChange(editor) {\n      if (this.onChangeCallback) {\n        this.onChangeCallback(editor.getContent({\n          format: this.outputFormat\n        }));\n      }\n    }\n\n  }\n\n  EditorComponent.ɵfac = function EditorComponent_Factory(t) {\n    return new (t || EditorComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID), ɵngcc0.ɵɵdirectiveInject(TINYMCE_SCRIPT_SRC, 8));\n  };\n\n  EditorComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: EditorComponent,\n    selectors: [[\"editor\"]],\n    inputs: {\n      cloudChannel: \"cloudChannel\",\n      apiKey: \"apiKey\",\n      id: \"id\",\n      modelEvents: \"modelEvents\",\n      disabled: \"disabled\",\n      initialValue: \"initialValue\",\n      init: \"init\",\n      inline: \"inline\",\n      outputFormat: \"outputFormat\",\n      tagName: \"tagName\",\n      plugins: \"plugins\",\n      toolbar: \"toolbar\",\n      allowedEvents: \"allowedEvents\",\n      ignoreEvents: \"ignoreEvents\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([EDITOR_COMPONENT_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 0,\n    template: function EditorComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, EditorComponent_ng_template_0_Template, 0, 0, \"ng-template\");\n      }\n    },\n    styles: [\"[_nghost-%COMP%] { display: block; }\"]\n  });\n  return EditorComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet EditorModule = /*#__PURE__*/(() => {\n  class EditorModule {}\n\n  EditorModule.ɵfac = function EditorModule_Factory(t) {\n    return new (t || EditorModule)();\n  };\n\n  EditorModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: EditorModule\n  });\n  EditorModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, FormsModule]]\n  });\n  return EditorModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(EditorModule, {\n    declarations: function () {\n      return [EditorComponent];\n    },\n    imports: function () {\n      return [CommonModule, FormsModule];\n    },\n    exports: function () {\n      return [EditorComponent];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { EditorComponent, EditorModule, TINYMCE_SCRIPT_SRC, Events as ɵa }; //# sourceMappingURL=tinymce-tinymce-angular.js.map","map":null,"metadata":{},"sourceType":"module"}